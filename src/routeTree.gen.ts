/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LayoutIndexRouteImport } from './routes/_layout/index'
import { Route as AppLayoutRouteImport } from './routes/app/_layout'
import { Route as AppLayoutResourcesRouteImport } from './routes/app/_layout/resources'
import { Route as AppLayoutHomeRouteImport } from './routes/app/_layout/home'

const AppRouteImport = createFileRoute('/app')()

const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const AppLayoutRoute = AppLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AppRoute,
} as any)
const AppLayoutResourcesRoute = AppLayoutResourcesRouteImport.update({
  id: '/resources',
  path: '/resources',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppLayoutHomeRoute = AppLayoutHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AppLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/app': typeof AppLayoutRouteWithChildren
  '/': typeof LayoutIndexRoute
  '/app/home': typeof AppLayoutHomeRoute
  '/app/resources': typeof AppLayoutResourcesRoute
}
export interface FileRoutesByTo {
  '/app': typeof AppLayoutRouteWithChildren
  '/': typeof LayoutIndexRoute
  '/app/home': typeof AppLayoutHomeRoute
  '/app/resources': typeof AppLayoutResourcesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/app': typeof AppRouteWithChildren
  '/app/_layout': typeof AppLayoutRouteWithChildren
  '/_layout/': typeof LayoutIndexRoute
  '/app/_layout/home': typeof AppLayoutHomeRoute
  '/app/_layout/resources': typeof AppLayoutResourcesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/app' | '/' | '/app/home' | '/app/resources'
  fileRoutesByTo: FileRoutesByTo
  to: '/app' | '/' | '/app/home' | '/app/resources'
  id:
    | '__root__'
    | '/_layout'
    | '/app'
    | '/app/_layout'
    | '/_layout/'
    | '/app/_layout/home'
    | '/app/_layout/resources'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  AppRoute: typeof AppRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/app/_layout': {
      id: '/app/_layout'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppLayoutRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/_layout/resources': {
      id: '/app/_layout/resources'
      path: '/resources'
      fullPath: '/app/resources'
      preLoaderRoute: typeof AppLayoutResourcesRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/app/_layout/home': {
      id: '/app/_layout/home'
      path: '/home'
      fullPath: '/app/home'
      preLoaderRoute: typeof AppLayoutHomeRouteImport
      parentRoute: typeof AppLayoutRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface AppLayoutRouteChildren {
  AppLayoutHomeRoute: typeof AppLayoutHomeRoute
  AppLayoutResourcesRoute: typeof AppLayoutResourcesRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppLayoutHomeRoute: AppLayoutHomeRoute,
  AppLayoutResourcesRoute: AppLayoutResourcesRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

interface AppRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
}

const AppRouteChildren: AppRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  AppRoute: AppRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
